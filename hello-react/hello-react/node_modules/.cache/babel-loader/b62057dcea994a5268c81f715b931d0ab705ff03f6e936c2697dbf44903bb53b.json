{"ast":null,"code":"var _jsxFileName = \"/Users/shyun/Desktop/git/study/react-practice/hello-react/src/IterationSample.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst IterationSample = () => {\n  _s();\n  const [names, setNames] = useState([{\n    id: 1,\n    text: '눈사람'\n  }, {\n    id: 2,\n    text: '얼음'\n  }, {\n    id: 3,\n    text: '눈'\n  }, {\n    id: 4,\n    text: '바람'\n  }]);\n  const [inputText, setInputText] = useState('');\n  const [nextId, setNextId] = useState(5);\n  const onChange = e => setInputText(e.target.value);\n  const onClick = () => {\n    const newNames = names.concat({\n      id: nextId,\n      text: inputText\n    });\n    setNextId(nextId + 1);\n    setNames(newNames);\n    setInputText('');\n  };\n  const onRemove = id => {\n    const newNames = names.filter(name => name.id !== id);\n    setNames(newNames);\n  };\n  const nameList = names.map(name => /*#__PURE__*/_jsxDEV(\"li\", {\n    onDoubleClick: () => onRemove(name.id),\n    children: name.text\n  }, name.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: inputText,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClick,\n      children: \"\\uCD94\\uAC00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: nameList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(IterationSample, \"kHYMeOMiUmPljlRdGxlYuGSQuHk=\");\n_c = IterationSample;\nexport default IterationSample;\nvar _c;\n$RefreshReg$(_c, \"IterationSample\");","map":{"version":3,"names":["React","useState","IterationSample","names","setNames","id","text","inputText","setInputText","nextId","setNextId","onChange","e","target","value","onClick","newNames","concat","onRemove","filter","name","nameList","map"],"sources":["/Users/shyun/Desktop/git/study/react-practice/hello-react/src/IterationSample.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst IterationSample = () => {\n  const [names, setNames] = useState([\n    { id: 1, text: '눈사람' },\n    { id: 2, text: '얼음' },\n    { id: 3, text: '눈' },\n    { id: 4, text: '바람' },\n  ]);\n  const [inputText, setInputText] = useState('');\n  const [nextId, setNextId] = useState(5);\n\n  const onChange = (e) => setInputText(e.target.value);\n  const onClick = () => {\n    const newNames = names.concat({ id: nextId, text: inputText });\n    setNextId(nextId + 1);\n    setNames(newNames);\n    setInputText('');\n  };\n  const onRemove = (id) => {\n    const newNames = names.filter((name) => name.id !== id);\n    setNames(newNames);\n  };\n\n  const nameList = names.map((name) => (\n    <li key={name.id} onDoubleClick={() => onRemove(name.id)}>\n      {name.text}\n    </li>\n  ));\n  return (\n    <>\n      <input value={inputText} onChange={onChange} />\n      <button onClick={onClick}>추가</button>\n      {/* 아래방식보다는 함수 선언하여서 사용하는것이 좋음 */}\n      {/* <button onClick = {() => {\n        const newNames = names.concat({id: nextId, text: inputText});\n        setNextId(nextId + 1);\n        setNames(newNames);\n        setInputText('');\n      }}>추가</button> */}\n      <ul>{nameList}</ul>\n    </>\n  );\n};\n\nexport default IterationSample;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC;AAAA;AAExC,MAAMC,eAAe,GAAG,MAAM;EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGH,QAAQ,CAAC,CACjC;IAAEI,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAM,CAAC,EACtB;IAAED,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAK,CAAC,EACrB;IAAED,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAI,CAAC,EACpB;IAAED,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAK,CAAC,CACtB,CAAC;EACF,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EAEvC,MAAMU,QAAQ,GAAIC,CAAC,IAAKJ,YAAY,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACpD,MAAMC,OAAO,GAAG,MAAM;IACpB,MAAMC,QAAQ,GAAGb,KAAK,CAACc,MAAM,CAAC;MAAEZ,EAAE,EAAEI,MAAM;MAAEH,IAAI,EAAEC;IAAU,CAAC,CAAC;IAC9DG,SAAS,CAACD,MAAM,GAAG,CAAC,CAAC;IACrBL,QAAQ,CAACY,QAAQ,CAAC;IAClBR,YAAY,CAAC,EAAE,CAAC;EAClB,CAAC;EACD,MAAMU,QAAQ,GAAIb,EAAE,IAAK;IACvB,MAAMW,QAAQ,GAAGb,KAAK,CAACgB,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACf,EAAE,KAAKA,EAAE,CAAC;IACvDD,QAAQ,CAACY,QAAQ,CAAC;EACpB,CAAC;EAED,MAAMK,QAAQ,GAAGlB,KAAK,CAACmB,GAAG,CAAEF,IAAI,iBAC9B;IAAkB,aAAa,EAAE,MAAMF,QAAQ,CAACE,IAAI,CAACf,EAAE,CAAE;IAAA,UACtDe,IAAI,CAACd;EAAI,GADHc,IAAI,CAACf,EAAE;IAAA;IAAA;IAAA;EAAA,QAGjB,CAAC;EACF,oBACE;IAAA,wBACE;MAAO,KAAK,EAAEE,SAAU;MAAC,QAAQ,EAAEI;IAAS;MAAA;MAAA;MAAA;IAAA,QAAG,eAC/C;MAAQ,OAAO,EAAEI,OAAQ;MAAA,UAAC;IAAE;MAAA;MAAA;MAAA;IAAA,QAAS,eAQrC;MAAA,UAAKM;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAM;EAAA,gBAClB;AAEP,CAAC;AAAC,GAzCInB,eAAe;AAAA,KAAfA,eAAe;AA2CrB,eAAeA,eAAe;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}